// Remove from theme
$theme-colors: map-remove($theme-colors, "danger");

// Responsive alignment
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .text#{$infix}-left {
      text-align: left !important;
    }
    .text#{$infix}-right {
      text-align: right !important;
    }
    .text#{$infix}-center {
      text-align: center !important;
    }
  }
}

// Transformation
.text-lowercase {
  text-transform: lowercase !important;
}
.text-uppercase {
  text-transform: uppercase !important;
}
.text-capitalize {
  text-transform: capitalize !important;
}

// Functions
@function svg-color($colour) {
  @return "%23" + str-slice("#{$colour}", 2, -1);
}

// Mixins
@mixin transition {
  transition: all 300ms cubic-bezier(0.2, 0.3, 0.25, 0.9) 0ms;
}
@mixin image_full {
  width: 100%;
  height: 100%;
  -o-object-fit: cover;
  object-fit: cover;
}

@mixin btn-custom-outline-bgs($active-background: $color) {
  @include hover() {
    background-color: $active-background;
  }

  &.disabled,
  &:disabled {
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    background-color: $active-background;
  }
}

@each $color, $value in $theme-colors {
  .btn-outline-#{$color} {
    background-color: $light;
    @include btn-custom-outline-bgs($value);
  }
}

// Modal
@include media-breakpoint-only(md) {
  .modal-lg,
  .modal-xl {
    max-width: map-get($container-max-widths, "md");
  }
}
